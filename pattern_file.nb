wwopy_ext.cheaptrick:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def cheaptrick(
        x: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        fs: int,
        temporal_positions: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        f0: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        q1: float | None = None,
        f0_floor: float | None = None,
        fft_size: int | None = None,
    ) -> tuple[ndarray[tuple[int, int], dtype[double]], int]:
        \doc

wwopy_ext.d4c:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def d4c(
        x: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        fs: int,
        temporal_positions: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        f0: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        fft_size: int,
        threshold: float | None = None,
    ) -> ndarray[tuple[int, int], dtype[double]]:
        \doc

wwopy_ext.dio:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def dio(
        x: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        fs: int,
        f0_floor: float | None = None,
        f0_ceil: float | None = None,
        channels_in_octave: float | None = None,
        frame_period: float | None = None,
        speed: int | None = None,
        allowed_range: float | None = None,
    ) -> tuple[
        ndarray[tuple[int], dtype[double]], ndarray[tuple[int], dtype[double]], float
    ]:
        \doc

wwopy_ext.harvest:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def harvest(
        x: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        fs: int,
        f0_floor: float | None = None,
        f0_ceil: float | None = None,
        frame_period: float | None = None,
    ) -> tuple[
        ndarray[tuple[int], dtype[double]], ndarray[tuple[int], dtype[double]], float
    ]:
        \doc

wwopy_ext.stonemask:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def stonemask(
        x: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        fs: int,
        temporal_positions: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        f0: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
    ) -> ndarray[tuple[int], dtype[double]]:
        \doc

wwopy_ext.synthesis:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def synthesis(
        f0: ndarray[tuple[int], dtype[double]]
        | Annotated[ArrayLike, {"dtype": "double", "shape": (None), "writable": False}],
        spectrogram: ndarray[tuple[int, int], dtype[double]]
        | Annotated[
            ArrayLike, {"dtype": "double", "shape": (None, None), "writable": False}
        ],
        aperiodicity: ndarray[tuple[int, int], dtype[double]]
        | Annotated[
            ArrayLike, {"dtype": "double", "shape": (None, None), "writable": False}
        ],
        frame_period: float,
        fs: int,
    ) -> ndarray[tuple[int], dtype[double]]:
        \doc

wwopy_ext.RealtimeSynthesizer.append:
    \from typing import Annotated
    \from numpy import double, dtype, ndarray
    \from numpy.typing import ArrayLike
    def append(
        self,
        f0: ndarray[tuple[int], dtype[double]]
        | Annotated[
            ArrayLike, {"dtype": "double", "shape": (None), "writable": False}
        ],
        spectrogram: ndarray[tuple[int, int], dtype[double]]
        | Annotated[
            ArrayLike, {"dtype": "double", "shape": (None, None), "writable": False}
        ],
        aperiodicity: ndarray[tuple[int, int], dtype[double]]
        | Annotated[
            ArrayLike, {"dtype": "double", "shape": (None, None), "writable": False}
        ],
        /,
    ) -> bool:
        \doc

wwopy_ext.RealtimeSynthesizer.synthesis:
    \from numpy import double, dtype, ndarray
    def synthesis(self) -> ndarray[tuple[int], dtype[double]] | None:
        \doc
