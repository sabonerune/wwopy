name: Test

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
      - name: Install dependencies
        id: install-depend
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement ./requirements.txt
          python -m pip install --no-build-isolation -C build-dir=build -C cmake.args=-DCMAKE_EXPORT_COMPILE_COMMANDS=ON .[dev]
      - name: Ruff Check
        run: |
          python -m ruff check --output-format=github
      - name: Ruff Format
        if: ${{ !cancelled() }}
        run: |
          python -m ruff format --diff
      - name: Run clang-format
        if: ${{ !cancelled() }}
        run: |
          clang-format --Werror --dry-run src/*.cpp src/*.hpp
      - name: Run clang-tidy
        if: ${{ !cancelled() }}
        run: |
          clang-tidy -p build --warnings-as-errors=* src/*.cpp src/*.hpp
      - name: Run cmake-format
        if: ${{ !cancelled() }}
        run: |
          cmake-format ./CMakeLists.txt | git diff --exit-code --no-index -- ./CMakeLists.txt -
      - name: Run cmake-lint
        if: ${{ !cancelled() }}
        run: |
          cmake-lint CMakeLists.txt

  test:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        os: [Linux, Windows, macOS]
        architecture: [x64, arm64]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: Linux
            architecture: x64
            runner: ubuntu-latest
          - os: Linux
            architecture: arm64
            runner: ubuntu-24.04-arm
          - os: Windows
            architecture: x64
            runner: windows-latest
          - os: macOS
            runner: macos-latest
          - os: macOS
            architecture: x64
            python-version: "3.8"
            runner: macos-13
          - os: macOS
            architecture: x64
            python-version: "3.9"
            runner: macos-13
          - os: macOS
            architecture: x64
            python-version: "3.10"
            runner: macos-13
        exclude:
          - os: Windows
            architecture: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true
      - name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
        id: install-py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          architecture: ${{ matrix.architecture }}
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
      - name: Strip arm64
        if: ${{ matrix.runner == 'macos-latest' && matrix.architecture == 'x64' }}
        run: |
          lipo -remove arm64 ${{ steps.install-py.outputs.python-path }} -output ${{ steps.install-py.outputs.python-path }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement ./requirements.txt
          python -m pip install -C build.verbose=true -C logging.level=INFO -v --no-build-isolation .[test]
      - name: Test with pytest
        run: |
          pytest
